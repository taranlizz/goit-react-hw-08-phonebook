{"version":3,"file":"static/js/462.8ce89103.chunk.js","mappings":"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","sources":["components/FormStyle/FormStyle.styled.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactListEl/ContactListEl.styled.jsx","components/ContactListEl/ContactListEl.jsx","redux/filter/selectors.js","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n`;\n\nexport const LabelEl = styled.label`\n  font-size: 15px;\n  margin-bottom: 5px;\n`;\n\nexport const InputEl = styled(Field)`\n  height: 40px;\n  padding-right: 12px;\n  padding-left: 12px;\n  background-color: rgba(127, 86, 217, 0.04);\n  border-radius: 4px;\n  margin-bottom: 20px;\n  border: 1px solid #d8d8d8;\n  font-size: 14px;\n  line-height: 1.75;\n\n  &:focus {\n    outline: 1px solid #7f56d9;\n  }\n`;\n\nexport const FormWrapper = styled.div`\n  margin-bottom: 120px;\n`;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormEl = styled(Form)`\n  margin-bottom: 40px;\n  background-color: #fff;\n  border-radius: 10px;\n  padding: 30px;\n  width: 350px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 10px 3px;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  margin-bottom: 8px;\n`;\n\nexport const Input = styled(Field)`\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  outline: 0;\n  margin-bottom: 5px;\n  width: 100%;\n  background-color: transparent;\n\n  &:focus {\n    border-color: #3366cc;\n  }\n\n  &:last-of-type {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  background-color: #3366cc;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #27408b;\n  }\n`;\n\nexport const ErrorDiv = styled(ErrorMessage)`\n  font-size: 20px;\n  color: red;\n  margin-bottom: 10px;\n`;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectErrorValue = state => state.contacts.error;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { ErrorDiv } from './ContactForm.styled';\nimport {\n  FormEl,\n  InputEl,\n  LabelEl,\n} from 'components/FormStyle/FormStyle.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Required!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces.'\n    ),\n  number: Yup.string()\n    .required('Required!')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      '        Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const ContactForm = () => {\n  const nameInputID = nanoid();\n  const numberInputID = nanoid();\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const checkIsPresent = contact => {\n    const isPresent = savedContact =>\n      savedContact.name.toLowerCase() === contact.name.toLowerCase();\n\n    return contacts.some(isPresent);\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={contactSchema}\n      onSubmit={(contact, actions) => {\n        contact.name = contact.name.trim();\n        if (checkIsPresent(contact)) {\n          return alert(`${contact.name} is already in contacts.`);\n        }\n        dispatch(addContact(contact));\n        actions.resetForm();\n      }}\n    >\n      <FormEl>\n        <LabelEl htmlFor={nameInputID}>Name</LabelEl>\n        <InputEl name=\"name\" id={nameInputID}></InputEl>\n        <ErrorDiv name=\"name\" component=\"div\" />\n        <LabelEl htmlFor={numberInputID}>Number</LabelEl>\n        <InputEl name=\"number\" id={numberInputID} type=\"tel\"></InputEl>\n        <ErrorDiv name=\"number\" component=\"div\" />\n        <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n          Create\n        </Button>\n      </FormEl>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  font-size: 18px;\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-left: 12px;\n  background-color: #7f56d9;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  padding: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #27408b;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Button, Item } from './ContactListEl.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport const ContactListEl = ({ id, name, number }) => {\n  const isDisabled = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  return (\n    <Item>\n      {name}: {number}\n      <Button\n        type=\"button\"\n        disabled={isDisabled}\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </Button>\n    </Item>\n  );\n};\n\nContactListEl.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import { ContactListEl } from 'components/ContactListEl/ContactListEl';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/filter/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  return (\n    <ul>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListEl key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: inline-block;\n  font-size: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  outline: 0;\n  margin-bottom: 5px;\n  width: 350px;\n  background-color: transparent;\n\n  &:focus {\n    border-color: #3366cc;\n  }\n`;\n","import { Input, Label } from './ContactFilter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { changeFilter } from 'redux/filter/slice';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => dispatch(changeFilter(e.target.value.toLowerCase()))}\n        value={filter}\n      />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding-top: 20px;\n`;\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n`;\n\nexport const SubTitle = styled.h2`\n  margin-top: 20px;\n  margin-bottom: 15px;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Wrapper, Title, SubTitle } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <Title>Create contact</Title>\n      <ContactForm />\n      <SubTitle>Contacts</SubTitle>\n      <ContactFilter />\n      <ContactList />\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormEl","styled","Form","_templateObject","_taggedTemplateLiteral","LabelEl","_templateObject2","InputEl","Field","_templateObject3","FormWrapper","_templateObject4","ErrorDiv","ErrorMessage","_templateObject5","selectContacts","state","contacts","items","selectIsLoading","isLoading","contactSchema","Yup","shape","name","required","matches","number","ContactForm","nameInputID","nanoid","numberInputID","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","contact","actions","trim","some","savedContact","toLowerCase","checkIsPresent","alert","concat","addContact","resetForm","children","_jsxs","htmlFor","id","component","type","Button","variant","color","Item","ContactListEl","_ref","isDisabled","disabled","onClick","deleteContact","selectFilterValue","filter","selectFilteredContacts","createSelector","includes","ContactList","filteredContacts","map","Label","Input","ContactFilter","onChange","e","changeFilter","target","value","Wrapper","Title","SubTitle","useEffect","fetchContacts"],"sourceRoot":""}