{"version":3,"file":"static/js/901.46d90bba.chunk.js","mappings":"sLAEaA,E,QAAgBC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gK,yGCA1BC,EAAUH,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kCAIpBE,EAAWJ,EAAAA,GAAAA,EAAQK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,iDAKnBI,EAAUN,EAAAA,GAAAA,GAASO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,8B,SCTnBM,EAAc,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SAC5B,OACEC,EAAAA,EAAAA,MAACR,EAAO,CAAAO,SAAA,EACNE,EAAAA,EAAAA,KAACR,EAAQ,CAAAM,SAAC,2BACVE,EAAAA,EAAAA,KAACN,EAAO,CAAAI,SAAEA,MAGhB,ECPaG,EAAcb,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iE,kDCCxBY,GAASd,EAAAA,EAAAA,IAAOe,EAAAA,GAAPf,CAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wEAMrBc,EAAUhB,EAAAA,GAAAA,MAAYK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,qDAKtBe,GAAUjB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAaO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,qS,UCPvBiB,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAExB,OACEX,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACLC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAACC,EAAaC,GACtBX,GAASY,EAAAA,EAAAA,IAAMF,IACfC,EAAQE,WACV,EAAEvB,UAEFC,EAAAA,EAAAA,MAACG,EAAM,CAAAJ,SAAA,EACLE,EAAAA,EAAAA,KAACI,EAAO,CAACkB,QAASZ,EAAaZ,SAAC,WAChCE,EAAAA,EAAAA,KAACK,EAAO,CACNkB,KAAK,QACLC,KAAK,QACLC,GAAIf,EACJgB,YAAY,6BAEd1B,EAAAA,EAAAA,KAACI,EAAO,CAACkB,QAASV,EAAgBd,SAAC,eACnCE,EAAAA,EAAAA,KAACK,EAAO,CACNkB,KAAK,WACLC,KAAK,WACLC,GAAIb,EACJc,YAAY,oBAEd1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACJ,KAAK,SAASK,QAAQ,YAAYC,MAAM,YAAW/B,SAAC,gBAMpE,EC1BA,EAXc,WACZ,OACEE,EAAAA,EAAAA,KAACb,EAAAA,EAAa,CAAAW,UACZC,EAAAA,EAAAA,MAACE,EAAW,CAAAH,SAAA,EACVE,EAAAA,EAAAA,KAACJ,EAAW,CAAAE,SAAC,2BACbE,EAAAA,EAAAA,KAACO,EAAS,QAIlB,C,wDCbO,IAkBII,EAAS,WAAH,IAAImB,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACZ,EAAIa,GAWvD,OAREb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/CenterWrapper/CenterWrapper.jsx","components/AuthHeading/AuthHeading.styled.jsx","components/AuthHeading/AuthHeading.jsx","components/AuthWrapper/AuthWrapper.styled.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CenterWrapper = styled.div`\n  position: relative;\n  height: calc(100vh - 70px);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport const Greeting = styled.p`\n  font-size: 14px;\n  color: #757575;\n`;\n\nexport const Heading = styled.h1`\n  font-size: 30px;\n`;\n","import { Greeting, Heading, Wrapper } from './AuthHeading.styled';\n\nexport const AuthHeading = ({ children }) => {\n  return (\n    <Wrapper>\n      <Greeting>Welcome! ðŸ‘‹</Greeting>\n      <Heading>{children}</Heading>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const AuthWrapper = styled.div`\n  position: absolute;\n  transform: translateY(-30%);\n`;\n","import { Form, Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n`;\n\nexport const LabelEl = styled.label`\n  font-size: 15px;\n  margin-bottom: 5px;\n`;\n\nexport const InputEl = styled(Field)`\n  height: 40px;\n  padding-right: 12px;\n  padding-left: 12px;\n  background-color: rgba(127, 86, 217, 0.04);\n  border-radius: 4px;\n  border: 1px solid #d8d8d8;\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.75;\n\n  &:focus {\n    outline: 1px solid #7f56d9;\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/operations';\nimport { FormEl, InputEl, LabelEl } from './LoginForm.styled';\nimport { Button } from '@mui/material';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const emailInputID = nanoid();\n  const passwordInputID = nanoid();\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={(credentials, actions) => {\n        dispatch(login(credentials));\n        actions.resetForm();\n      }}\n    >\n      <FormEl>\n        <LabelEl htmlFor={emailInputID}>Email</LabelEl>\n        <InputEl\n          type=\"email\"\n          name=\"email\"\n          id={emailInputID}\n          placeholder=\"Please enter your email\"\n        />\n        <LabelEl htmlFor={passwordInputID}>Password </LabelEl>\n        <InputEl\n          type=\"password\"\n          name=\"password\"\n          id={passwordInputID}\n          placeholder=\"Enter password\"\n        />\n        <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n          Sign In\n        </Button>\n      </FormEl>\n    </Formik>\n  );\n};\n","import { AuthHeading } from 'components/AuthHeading/AuthHeading';\nimport { AuthWrapper } from 'components/AuthWrapper/AuthWrapper.styled';\nimport { CenterWrapper } from 'components/CenterWrapper/CenterWrapper';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <CenterWrapper>\n      <AuthWrapper>\n        <AuthHeading>Login to your account</AuthHeading>\n        <LoginForm />\n      </AuthWrapper>\n    </CenterWrapper>\n  );\n};\n\nexport default Login;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["CenterWrapper","styled","_templateObject","_taggedTemplateLiteral","Wrapper","Greeting","_templateObject2","Heading","_templateObject3","AuthHeading","_ref","children","_jsxs","_jsx","AuthWrapper","FormEl","Form","LabelEl","InputEl","Field","LoginForm","dispatch","useDispatch","emailInputID","nanoid","passwordInputID","Formik","initialValues","email","password","onSubmit","credentials","actions","login","resetForm","htmlFor","type","name","id","placeholder","Button","variant","color","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}